using System;
using Beamable;
using Beamable.Player;
using TMPro;
using UnityEngine;
using System.Net.Http;
using Beamable.Api.Autogenerated.Content;
using Beamable.Server.Clients;
using UnityEngine.UI;

namespace Assets.Scripts
{
    public class ProfileManager : MonoBehaviour
    {
        private BeamContext _beamContext;
        private PlayerAccount _playerAccount;
        // private ContentUploader _contentUploader;
        private ImageUploadServiceClient _service;
        [Header("UI Text References")]
        [SerializeField]
        private TextMeshProUGUI usernameText;
        [SerializeField]
        private TextMeshProUGUI gidText;
        [SerializeField]
        private TextMeshProUGUI emailText;

        [Header("Profile Picture")]
        [SerializeField]
        private Image profileImage; 
        [SerializeField]
        private Button uploadButton;
        [SerializeField]
        private string localImagePath;

        private void Start()
        {
            Debug.Log("Start called. Initializing Beamable...");
            InitializeBeamable();
            uploadButton.onClick.AddListener(OnUploadButtonClicked);
        }

        private async void InitializeBeamable()
        {
            try
            {
                _service = new ImageUploadServiceClient();
                Debug.Log("Getting default BeamContext instance...");
                _beamContext = await BeamContext.Default.Instance;
                Debug.Log("BeamContext instance obtained.");

                Debug.Log("Waiting for Beamable accounts to be ready...");
                await _beamContext.Accounts.OnReady;
                Debug.Log("Beamable accounts ready.");

                _playerAccount = _beamContext.Accounts.Current;
                Debug.Log($"PlayerAccount loaded: Alias={_playerAccount.Alias}, GamerTag={_playerAccount.GamerTag}, Email={_playerAccount.Email}");

                // var httpClient = new HttpClient();
                // var contentApi = _beamContext.ServiceProvider.GetService<IContentApi>();
                // Debug.Log("Content API obtained.");

                // _contentUploader = new ContentUploader(contentApi, httpClient);
                // Debug.Log("ContentUploader initialized.");

                DisplayPlayerProfile();
            }
            catch (Exception ex)
            {
                Debug.LogError($"Failed to initialize Beamable: {ex.Message}");
            }
        }

        private void DisplayPlayerProfile()
        {
            Debug.Log("Displaying player profile...");
            if (_playerAccount != null)
            {
                var username = _playerAccount.Alias;
                var gid = _playerAccount.GamerTag.ToString();
                var shortenedGid = ShortenGamerTag(gid);
                var email = _playerAccount.Email ?? "Email not set";

                Debug.Log($"Profile data - Username: {username}, GID: {gid}, Email: {email}");

                usernameText.text = username;
                gidText.text = shortenedGid;
                emailText.text = email;

                Debug.Log("Player profile displayed successfully.");
            }
            else
            {
                Debug.LogError("Failed to retrieve player account information.");
                usernameText.text = "Not found";
                gidText.text = "Not found";
                emailText.text = "Not found";
            }
        }
        
        private void OnUploadButtonClicked()
        {
            Debug.Log("Upload button clicked.");
            NativeGallery.GetImageFromGallery((path) =>
            {
                if (!string.IsNullOrEmpty(path))
                {
                    Debug.Log($"Image selected: {path}");
                    localImagePath = path;
                    UploadProfilePicture();
                }
                else
                {
                    Debug.LogWarning("No image selected.");
                }
            });
        }

        public async void UploadProfilePicture()
        {
            try
            {
                Debug.Log("Starting upload of profile picture...");
                if (string.IsNullOrEmpty(localImagePath))
                {
                    Debug.LogError("Local image path is null or empty.");
                    return;
                }

                Debug.Log($"Uploading image from path: {localImagePath}");
                var hostedUrl = await _service.UploadImage(localImagePath);

                Debug.Log($"Profile picture uploaded successfully. Hosted URL: {hostedUrl}");
            }
            catch (Exception ex)
            {
                Debug.LogError($"Failed to upload profile picture: {ex.Message}");
            }
        }

        private string ShortenGamerTag(string gid)
        {
            Debug.Log($"Shortening GamerTag: {gid}");
            if (string.IsNullOrEmpty(gid) || gid.Length <= 12)
            {
                return gid;
            }

            var firstPart = gid[..9];
            var lastPart = gid[^3..];

            var shortenedGid = $"{firstPart}...{lastPart}";
            Debug.Log($"Shortened GamerTag: {shortenedGid}");
            return shortenedGid;
        }
    }
}
