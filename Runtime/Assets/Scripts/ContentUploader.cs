// File: ContentUploader.cs

using System;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography;
using System.Threading.Tasks;
using Beamable.Api.Autogenerated.Content;
using Beamable.Api.Autogenerated.Models;

namespace Assets.Scripts
{
    public class ContentUploader
    {
        private readonly HttpClient _httpClient;
        private readonly IContentApi _contentApi;

        public ContentUploader(IContentApi contentApi, HttpClient httpClient)
        {
            _httpClient = httpClient;
            _contentApi = contentApi;
        }

        /// <summary>
        /// Uploads a local image file to Beamable and returns the hosted URL.
        /// </summary>
        /// <param name="filePath">Path to the local image file.</param>
        /// <returns>Hosted URL of the uploaded image.</returns>
        public async Task<string> UploadLocalImage(string filePath)
        {
            var image = await System.IO.File.ReadAllBytesAsync(filePath);

            using var md5 = MD5.Create();
            var md5Bytes = md5.ComputeHash(image);
            var renderChecksum = BitConverter.ToString(md5Bytes).Replace("-", "");

            var saveBinaryResponse = await _contentApi.PostBinary(new SaveBinaryRequest
            {
                binary = new[]
                {
                    new BinaryDefinition
                    {
                        id = Guid.NewGuid().ToString(), // Unique ID for each upload
                        checksum = renderChecksum,
                        uploadContentType = "image/png"
                    }
                }
            });

            var binaryResponse = saveBinaryResponse.binary.First();
            var signedUrl = binaryResponse.uploadUri;

            var content = new ByteArrayContent(image);
            content.Headers.ContentType = new MediaTypeHeaderValue("image/png");
            content.Headers.ContentMD5 = md5Bytes;

            var putResponse = await _httpClient.PutAsync(signedUrl, content);
            putResponse.EnsureSuccessStatusCode();

            return binaryResponse.uri; // Hosted URL of the image
        }
    }
}
