//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beamable.Server.Clients
{
    using System;
    using Beamable.Platform.SDK;
    using Beamable.Server;
    
    
    /// <summary> A generated client for <see cref="Microservices.ImageUploadService.ImageUploadService"/> </summary
    public sealed class ImageUploadServiceClient : MicroserviceClient, Beamable.Common.IHaveServiceName
    {
        
        public ImageUploadServiceClient(BeamContext context = null) : 
                base(context)
        {
        }
        
        public string ServiceName
        {
            get
            {
                return "ImageUploadService";
            }
        }
        
        /// <summary>
        /// Call the UploadImage method on the ImageUploadService microservice
        /// <see cref="Microservices.ImageUploadService.ImageUploadService.UploadImage"/>
        /// </summary>
        public Beamable.Common.Promise<string> UploadImage(string filePath, byte[] image, byte[] md5Byte)
        {
            object raw_filePath = filePath;
            object raw_image = image;
            object raw_md5Byte = md5Byte;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("filePath", raw_filePath);
            serializedFields.Add("image", raw_image);
            serializedFields.Add("md5Byte", raw_md5Byte);
            return this.Request<string>("ImageUploadService", "UploadImage", serializedFields);
        }
        
        /// <summary>
        /// Call the UpdateProfileUrlStat method on the ImageUploadService microservice
        /// <see cref="Microservices.ImageUploadService.ImageUploadService.UpdateProfileUrlStat"/>
        /// </summary>
        public Beamable.Common.Promise<System.Threading.Tasks.Task> UpdateProfileUrlStat(string hostedUrl)
        {
            object raw_hostedUrl = hostedUrl;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("hostedUrl", raw_hostedUrl);
            return this.Request<System.Threading.Tasks.Task>("ImageUploadService", "UpdateProfileUrlStat", serializedFields);
        }
    }
    
    internal sealed class MicroserviceParametersImageUploadServiceClient
    {
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_String : MicroserviceClientDataWrapper<string>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Array_System_Byte : MicroserviceClientDataWrapper<byte[]>
        {
        }
    }
    
    [BeamContextSystemAttribute()]
    public static class ExtensionsForImageUploadServiceClient
    {
        
        [Beamable.Common.Dependencies.RegisterBeamableDependenciesAttribute()]
        public static void RegisterService(Beamable.Common.Dependencies.IDependencyBuilder builder)
        {
            builder.AddScoped<ImageUploadServiceClient>();
        }
        
        public static ImageUploadServiceClient ImageUploadService(this Beamable.Server.MicroserviceClients clients)
        {
            return clients.GetClient<ImageUploadServiceClient>();
        }
    }
}
