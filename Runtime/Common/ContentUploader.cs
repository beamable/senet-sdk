using System;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography;
using System.Threading.Tasks;
using Beamable.Api.Autogenerated.Content;
using Beamable.Api.Autogenerated.Models;
using UnityEngine;

namespace Beamable.Common
{
    public class ContentUploader
    {
        private readonly HttpClient _httpClient;
        private readonly IContentApi _contentApi;
        
        public ContentUploader(IContentApi contentApi, HttpClient httpClient)
        {
            _httpClient = httpClient;
            _contentApi = contentApi;
            Debug.Log("ContentUploader constructor called.");
        }
        
        public async Task<string> UploadLocalImage(string renderChecksum, byte[] image, byte[] md5Bytes)
        {
            try
            {
                var binaryReference = await GenerateSignedUrl(renderChecksum);
                var signedUrl = binaryReference.uploadUri;
                Debug.Log($"Signed URL obtained: {signedUrl}");
            
                Debug.Log("Uploading image to signed URL...");
                var content = new ByteArrayContent(image);
                content.Headers.ContentType = new MediaTypeHeaderValue("image/png");
                content.Headers.ContentMD5 = md5Bytes;
            
                var putResponse = await _httpClient.PutAsync(signedUrl, content);
                putResponse.EnsureSuccessStatusCode();
            
                Debug.Log("Image successfully uploaded to signed URL.");
                return binaryReference.uri; 
                
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }

        }


        private async Task<BinaryReference> GenerateSignedUrl(string renderChecksum)
        {
            try
            {
                Debug.Log("Sending PostBinary request...");
                var saveBinaryResponse = await _contentApi.PostBinary(new SaveBinaryRequest
                {
                    binary = new[]
                    {
                        new BinaryDefinition
                        {
                            id = Guid.NewGuid().ToString(), // Unique ID for each upload
                            checksum = renderChecksum,
                            uploadContentType = "image/png"
                        }
                    }
                });
            
                Debug.Log("PostBinary response received.");
                var binaryResponse = saveBinaryResponse.binary.First();
                var binaryReference = binaryResponse;
                return binaryReference;
            }
            catch (Exception e)
            {
                Debug.LogError($"Error generating signed URL: {e.Message}");
                throw;
            }
        }
    }
}


